INCLUDE PMACROS.ASM

.MODEL	SMALL
.STACK 64
.DATA

;MAX NUMBER FOR EACH OBSTACLES IS 5
OBSTACLES_COUNT	DB
OBSTACLES_ARRAY	DB	15 DUP(4 DUP(0))

TIMESTEP DB 1
COL		 DW ?
OBST 	 DB ?
RANDOMVAR DB ? 
.CODE

;GENERATES RANDOM X,Y,OBSTACLE ACCORDING TO CURRENT TIMESTEP FROM EQN : 4*(X^2+4)/3 MOD SELECTED ITEM
GENERATEOBSTACLE PROC
			
			MOV AL,TIMESTEP
			MUL AL
			ADD AX,4
			MOV BX,4
			XCHG AX,BX
			MUL BX
			
			MOV BL,3
			DIV BL
			MOV RANDOMVAR,AL
			
			MOV BX,OFFSET OSBACLES_COUT
			MOV DX,[BX]
			CMP DX,15
			JE OND
			
			;GETTING OBSTACLE TYPE
			;0 1ST , 1 2ND , 2 3RD
			;AL HAS RANDOM VARIABLE 
			INC [BX]	;INCREMENTING OBSTACLES COUNT
			
			;FINDING FIRST EMPTY PLACE
			INC BX
FINDPLACE:	CMP [BX],0
			JE EMPTYPLACE
			;ELSE ADD 4 TO CHECK NEXT PLACE
			ADD BX,4
			JMP FINDPLACE
			
EMPTYPLACE:	MOV AH, 0
			MOV BL,3
			DIV BL
			
			CMP AH,0
			JNE OBS2
			MOV [BX]+1,'@'
			JMP FINISHOBST
			
OBS2:		CMP AH,1
			JNE	OBS3
			MOV 
			JMP FINISHOBST
			
OBS3:		MOV BX,OFFSET OBST3_COUNT
			
FINISHOBST:	MOV DL,[BX]
			INC DL
			CMP DL,5		;CHECK IF CURRENT OSBTACLE TYPE IS MAX
			JA OEND
			
			;CALCULATE OFFSET OF COORDINATES IN SI
			MOV SI,BX
			MOV AL,[SI]	;AX CONTAINS OFFSET OF COORDINATES FROM COUNT IN BUFFER
			MOV DH,3
			MUL DH
			INC AL 
			MOV AH,0
			ADD SI,AX
			MOV [BX],DL	;MOV VALUE AFTER INCREMENT IN BX (INCREASE COUNT)
			
			
			;GETTING ROW
			MOV AL,RANDOMVAR
			MOV BL,2
			DIV BL	;AH CONTAINS REM
			
			CMP AH,0
			JNE SOUTH
			MOV byte ptr[SI],0
			MOV byte ptr[SI+2],0
			JMP GETCOL
			
SOUTH:		MOV byte ptr [SI],24
			MOV byte ptr[SI]+2,1
			
			
			;GETTING COLUMN
GETCOL:		INC SI
            MOV AL,RANDOMVAR
			MOV BL,80
			DIV BL
			MOV [SI],AH
			
OEND:		RET
GENERATEOBSTACLE ENDP


DRAWOBSTACLES PROC 
			PUSH CX
			PUSH BX
			;PRINTING OBSTACLES1
			MOV CL, OBST1_COUNT
			MOV BX,OFFSET OBST1_COORD
			
DRAWO1:	    CMP CL, 0
			JE STARTO2
			SCURSOR [BX], [BX] + 1
			PRINTCHAR OBST1_ASCII,04
			
			;MOVING OBSTACLE UP OR DOWN
			CMP BYTE PTR[BX]+2 ,0
			JNE	FROMS
			INC BYTE PTR[BX]+1
			JMP NXT
FROMS:		DEC BYTE PTR[BX]+1
			
NXT:		ADD BX, 3
			LOOP DRAWO1
			
STARTO2:	;PRINTING OBSTACLES2
			MOV CL, OBST2_COUNT
			MOV BX,OFFSET OBST2_COORD
			
DRAWO2:		CMP CL, 0
			JE STARTO3
			SCURSOR [BX], [BX] + 1
			PRINTCHAR OBST2_ASCII,04
			ADD BX, 3
			LOOP DRAWO2
			
STARTO3:	;PRINTING OBSTACLES3
			MOV CL, OBST3_COUNT
			MOV BX,OFFSET OBST3_COORD
			
DRAWO3:		CMP CL, 0
			JE STOPO 
			SCURSOR [BX], [BX] + 1
			PRINTCHAR OBST3_ASCII,04
			ADD BX, 3
			LOOP DRAWO3
		    
		
STOPO:		POP BX
			POP CX
			RET
DRAWOBSTACLES ENDP



MAIN PROC FAR
			MOV AX,@DATA
			MOV DS,AX
			
			;SWITCH VIDEO MODE
			MOV AH,0
			MOV AL,13H
			INT 10H
			
			MOV CX,100
INFLOOP:	CALL GENERATEOBSTACLE
			CALL DRAWOBSTACLES
			ADD TIMESTEP, 1
			DEL
			LOOP INFLOOP
			
EXIT:		MOV AH,4CH
			INT 21h
			
MAIN ENDP
END MAIN
