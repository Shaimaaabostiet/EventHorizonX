INCLUDE PMACROS.ASM

.MODEL	SMALL
.STACK 64
.DATA

;MAX NUMBER FOR EACH OBSTACLES IS 5
OBS_COUNT	DB  0
OBS_ARR	DB	60 DUP (0)

TIMESTEP DB 1
COL		 DW ?
OBST 	 DB ?
RANDOMVAR DB ? 
.CODE

;GENERATES RANDOM X,Y,OBSTACLE ACCORDING TO CURRENT TIMESTEP FROM EQN : 4*(X^2+4)/3 MOD SELECTED ITEM
GENERATEOBSTACLE PROC
			
			MOV AL,TIMESTEP
			MOV AH,0
			MUL AL
			ADD AX,4
			MOV BX,4
			XCHG AX,BX
			MUL BX
			
			MOV BL,3
			DIV BL
			MOV RANDOMVAR,AL
			
			lEA BX,OBS_COUNT
			MOV DX,[BX]
			CMP DX,15
			JE OEND
			
			;GETTING OBSTACLE TYPE
			;0 1ST , 1 2ND , 2 3RD
			;AL HAS RANDOM VARIABLE 
			INC byte ptr [BX]	;INCREMENTING OBSTACLES COUNT
			
			;FINDING FIRST EMPTY PLACE
			INC BX
FINDPLACE:	CMP byte ptr [BX],0
			JE EMPTYPLACE
			;ELSE ADD 4 TO CHECK NEXT PLACE
			ADD BX,4
			JMP FINDPLACE
			
EMPTYPLACE:	MOV AH, 0
			MOV CL,3
			DIV CL
			
			CMP AH,0
			JNE OBS2
			MOV byte ptr [BX],'@'
			JMP GETOBSROW
			
OBS2:		CMP AH,1
			JNE	OBS3
			MOV byte ptr [BX],02
			JMP GETOBSROW
			
OBS3:		MOV byte ptr [BX],0FEH
			
			
			
			;GETTING ROW
GETOBSROW:	INC BX
			MOV AL,RANDOMVAR  
			MOV AH,0
			PUSH BX
			MOV BH,0
			MOV BL,2
			DIV BL	;AH CONTAINS REM
			POP BX 
			 
			CMP AH,0
			JNE SOUTH
			MOV byte ptr [BX],0
			MOV byte ptr [BX]+2,0
			JMP GETOBSCOL
			
SOUTH:		MOV byte ptr[BX],24
			MOV byte ptr[BX]+2,1
			
			
			;GETTING COLUMN
GETOBSCOL:	INC BX
            MOV AL,RANDOMVAR 
            MOV AH,0
			MOV CL,80
			DIV CL
			MOV [BX],AH
			 
OEND:     RET

GENERATEOBSTACLE ENDP  


;_____________________________________________________________
;DRAWOSBTACLES PROC
DRAWOSBTACLES PROC	
			PUSH CX
			
			MOV CX,15
			MOV BX,OFFSET OBS_ARR

DRAWLOOP:	MOV DL,[BX]
			CMP DL,0
			JE NEXT
			SCURSOR	[BX]+1,[BX]+2
			PRINTCHAR [BX],04
			
NEXT:		ADD BX,4
			LOOP DRAWLOOP    
			POP CX

			RET
DRAWOSBTACLES ENDP


;_____________________________________________________________
; MOVES OBSTACLE	 AND REMOVES THE PREVIOUS ONE
MOVE PROC
		PUSH AX
		PUSH BX
		PUSH CX
		PUSH DX
		
		MOV SI,OFFSET OBS_ARR
		
		MOV CX,15
OLOOP:	CMP BYTE PTR [SI],0     ;CHECK IS OFBSTACLE EXISTS
        JE RE
        CMP BYTE PTR [SI+3],0
		JNZ UPWARDS
		
DOWNWARS:CMP BYTE PTR[SI+1],18H
		JNE	MOVEDN
		MOV BYTE PTR [SI],0
		JMP RE
	
MOVEDN:	INC BYTE PTR [SI+1]
		JMP RE
	
UPWARDS:CMP BYTE PTR[SI+1],00
		JNE	MOVEUP
		MOV BYTE PTR [SI],0
		JMP RE
MOVEUP:	DEC BYTE PTR [SI+1]

RE:		ADD SI, 4
		LOOP OLOOP

		
		POP DX
		POP CX
		POP BX
		POP AX
		RET
MOVE	ENDP
;_______________________________________________

MAIN PROC FAR
			MOV AX,@DATA
			MOV DS,AX
			
			;SWITCH VIDEO MODE
			MOV AH,0
			MOV AL,13H
			INT 10H
			
			MOV CX,100
INFLOOP:   
		   CALL GENERATEOBSTACLE
		   CALL DRAWOSBTACLES
		   CALL MOVE
			
			ADD TIMESTEP, 1
			DEL
			CLEARSCREEN
			
			;CHECK IF ESCAPE IS PRESSED
			MOV AH,01
			INT 16H
			JZ LP1
			CMP AH,01
			JE EXIT
LP1:		LOOP INFLOOP
			
EXIT:		MOV AH,4CH
			INT 21h
			
MAIN ENDP
END MAIN
